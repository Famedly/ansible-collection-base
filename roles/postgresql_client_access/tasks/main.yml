---
- name: "Get PostgreSQL container info"
  community.docker.docker_container_info:
    name: "{{ postgresql_container_name }}"
  register: "postgresql_container"
  tags: ["deploy", "deploy-postgresql-client-access"]

- name: "Ensure users are present"
  community.postgresql.postgresql_user:
    name: "{{ item.name }}"
    password: "{{ item.password }}"
    state: "present"
    login_host: "{{ postgresql_connection.login_host }}"
    login_port: "{{ postgresql_connection.login_port }}"
    login_password: "{{ postgresql_connection.login_password | default(omit) }}"
  loop: "{{ postgresql_client_access_users }}"
  loop_control:
    label: "{{ item.name }}"
  vars:
    item_state: "{{ item.state | default(postgresql_client_access_state) }}"
  when: "item_state == 'present'"
  tags: ["deploy", "deploy-postgresql-client-access"]

- name: "Ensure databases are present"
  community.postgresql.postgresql_db:
    name: "{{ item.name }}"
    owner: "{{ item.owner | default(omit) }}"
    lc_collate: "{{ item.lc_collate | default('C') }}"
    lc_ctype: "{{ item.lc_ctype | default('C') }}"
    template: "{{ item.template | default('template0') }}"
    state: "present"
    login_host: "{{ postgresql_connection.login_host }}"
    login_port: "{{ postgresql_connection.login_port }}"
    login_password: "{{ postgresql_connection.login_password | default(omit) }}"
  loop: "{{ postgresql_client_access_databases }}"
  loop_control:
    label: "{{ item.name }}"
  vars:
    item_state: "{{ item.state | default(postgresql_client_access_state) }}"
  when: "item_state == 'present'"
  tags: ["deploy", "deploy-postgresql-client-access"]

- name: "Ensure pg_hba.conf is up to date"
  community.postgresql.postgresql_pg_hba:
    dest: "{{ postgresql_config_path }}/pg_hba.conf"
    contype: "{{ item.contype }}"
    databases: "{{ item.databases | default(omit) }}"
    users: "{{ item.users | default(omit) }}"
    method: "{{ item.method | default(omit) }}"
    options: "{{ item.options | default(omit) }}"
    address: "{{ item.address | default('') }}"
    netmask: "{{ item.netmask | default(omit) }}"
    state: "{{ item_state }}"
  loop: "{{ postgresql_client_access_hba_entries }}"
  vars:
    item_state: "{{ item.state | default(postgresql_client_access_state) }}"
  notify: "postgresql_container_restart"
  tags: ["deploy", "deploy-postgresql-client-access"]

- name: "Ensure databases are absent"
  community.postgresql.postgresql_db:
    name: "{{ item.name }}"
    state: "absent"
    login_host: "{{ postgresql_connection.login_host }}"
    login_port: "{{ postgresql_connection.login_port }}"
    login_password: "{{ postgresql_connection.login_password | default(omit) }}"
  loop: "{{ postgresql_client_access_databases }}"
  loop_control:
    label: "{{ item.name }}"
  vars:
    item_state: "{{ item.state | default(postgresql_client_access_state) }}"
  when: "item_state == 'absent'"
  tags: ["deploy", "deploy-postgresql-client-access"]

- name: "Ensure users are absent"
  community.postgresql.postgresql_user:
    name: "{{ item.name }}"
    state: "absent"
    login_host: "{{ postgresql_connection.login_host }}"
    login_port: "{{ postgresql_connection.login_port }}"
    login_password: "{{ postgresql_connection.login_password | default(omit) }}"
  loop: "{{ postgresql_client_access_users }}"
  loop_control:
    label: "{{ item.name }}"
  vars:
    item_state: "{{ item.state | default(postgresql_client_access_state) }}"
  when: "item_state == 'absent'"
  tags: ["deploy", "deploy-postgresql-client-access"]

- name: "Flush handlers to ensure pg_hba updates are propagated in time"
  ansible.builtin.meta: "flush_handlers"
